// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?   
  image         String?
  balance_VES   Decimal   @default(0) // Cambiado a Decimal para consistencia con transacciones
  balance_USDT  Decimal   @default(0.0) // Cambiado a Decimal
  accounts      Account[] // Corregido: Cuenta -> Account
  sessions      Session[] // Corregido: Sesion -> Session
  matches       Match[]
  statistics    Statistic?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  is_admin      Boolean   @default(false) // Nuevo campo para rol de administrador

  adminCreatedTransactions Transaction[] @relation("AdminCreatedTransactions")
  transactions             Transaction[] // Transacciones pertenecientes a este usuario
  wonMatches               Match[]       @relation("WonMatches") // Partidas ganadas por este usuario
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // e.g., "oauth", "credentials"
  provider          String  // e.g., "google", "credentials"
  providerAccountId String  // ID del usuario en el proveedor OAuth
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MatchState {
  WAITING
  PLAYING
  FINISHED
}

model Match {
  id          String   @id @default(cuid())
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id]) // Corregido: Usuario -> User
  players     String[] // Players IDs
  matchCategory MatchCategory // Nueva: Categoría de la partida (gratuita, de pago)
  gameMode    GameMode      // Nueva: Modo de juego (ronda única, partida completa)
  feeAmount   Decimal?      // Monto de la entrada, solo para PAID_PLAY
  feeCurrency Currency?     // Moneda de la entrada, solo para PAID_PLAY
  state       MatchState  @default(WAITING)
  score       Json?    // Every player's score
  winnerId    String?  // Opcional: ID del usuario ganador
  transactions Transaction[] // Transacciones asociadas a esta partida (game_fee, prize_payout)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  winner      User?    @relation("WonMatches", fields: [winnerId], references: [id], onDelete: SetNull) 
  // onDelete: SetNull: si el usuario ganador se elimina, el matchId en winnerId se vuelve null pero el match persiste.
}


model Statistic{
  id              String @id @default(cuid())
  userId          String @unique
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  playedMatches   Int    @default(0)
  wins            Int    @default(0)
  totalPoints     Int    @default(0)
  skillLevel      Int    @default(1000)
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  GAME_FEE 
  PRIZE_PAYOUT
}

enum Currency {
  VES
  USDT
}



model Transaction {
  id                String  @id @default(cuid())
  userId            String
  creatorId         String  // creator id (an admin user)
  creatorUser       User    @relation("AdminCreatedTransactions", fields: [creatorId], references: [id])
  type              TransactionType @default(DEPOSIT)
  currency          Currency @default(VES)
  amount            Decimal
  matchId           String? // Opcional: ID de la partida asociada (para GAME_FEE, PRIZE_PAYOUT)
  comment           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  match Match? @relation(fields: [matchId], references: [id], onDelete: SetNull) // onDelete: SetNull para que si se borra la partida, la transacción no se borre, solo se desvincule.
                                                                                // O onDelete: Restrict si no quieres que se borre una partida si tiene transacciones.

  @@index([userId])
  @@index([type])
  @@index([currency])

}

enum EMType {
  REFRAN
  PENSAMIENTO
  CONSEJO
  HUMOR
  VARIOS
}

model EntryMessage {
  id        String   @id @default(cuid())
  content   String   @unique
  type      EMType   @default(REFRAN) // El tipo de mensaje
  source    String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nuevos enums para la Opción 3
enum MatchCategory {
  FREE_PLAY // Partidas sin costo de entrada
  PAID_PLAY // Partidas con costo de entrada
}

enum GameMode {
  SINGLE_ROUND // Ronda Única
  FULL_GAME    // Partida Completa
}
